#x=int(input("введити число"))
#print("следуешее за числом ",x,"число-" ,x+1)
#print("для числа ",x,"предыдушие число-" ,x-1)


#s=int(input("введити растояние которое проехал автомобиль км"))
#V1=int(input("введити скорость 1 авто км/ч"))
#V2=int(input("введити скорость 2 авто км/ч"))
#print("выводит скорость в часах",(s/(V1+V2))) #эта строка выводит скорость в часах
#print("выводит скорость в минутах",(s/(V1+V2)*60)) #эта строка выводит скорость в минутах


# x=int(input("введите свой возраст"))
# if x<20:
#     print("Take Youre Kindle")
# elif 0<x<=6:
#     print("возьмите пустышку или молоко")
# elif 7<x<=9:
#     print("возьмите планшет или печенько")
# elif 10<x<=14:
#     print("возьмите музыкальный плеер и шоколадку")
# elif 15<x<=18:
#     print("возьмите телефон и посмотрите Yotube")
# elif 19<x<=50:
#     print("Если хотите возьмите чашку виски")
# elif 51<x<=90:
#     print("возьмите плетик и наушники")
# elif 91<x<=1000:
#     print("не врите вам не столько")



# counter=1
# remainder=0
# while counter<=20: #если цикл меньше 20
#     remaider=int(counter%3) #считает 3 процента
#     if remaider==0: #если ремайдер = 0
#         print(counter) #написать число которое ровно 3 процентов
#     counter=counter+1 #сделать +1


# cakes=int(input("сколько тортов вы хотите испеч")) #для ввода даных (цифровых)
# egs=0 #это переменная
# summa=0 # это тоже перемменая
# while egs<=cakes: #цикл для подсчета яич
#     summa=summa+egs #перезаписываем переменную сумы в ее же значение + количества яиц
# print(summa,"яиц") # написать сумму в консоль

#from random import randint #импортирует библеотека
#counter=1 #переменная которая будет использоватся ниже
#randint(700,1500) #генерирует рандомные числа
#while  counter<=10: #цикл с помощью которого 10 раз повторяются действия
    #x=randint(700,1500) # переменая x ровно числу которое сгинрировал рандом
    #if x>1000: #если сгенерированое чесло меньше 1000
        #print(x,"это все стоимость товара больше 1000 грн")  #пишет в консоль
    #counter=counter+1


# x=int(input("введите число"))
# while (x!=0):
#     lastnumber=int(x%10)
#     x=int(x/10)


# bacterii=int(input("введите количество бактерий")) #для ввода данных
# counter=1 #переменая для подсчета
# while counter<=24: #спомощью цикла подсчет повторяяется 24 раза
#     bacterii=bacterii*2 #для подсчета бактерий
#     print(bacterii) #для вывода количества баоктерий в консоль
#     counter=counter+1 #заканчивает цикл





# firstrow=int(input("введите число"))
# hz=int(input("введите число"))
# counter=1
# while hz<=firstrow:
#     print(firstrow, firstrow+1, firstrow+2, firstrow+3, firstrow+4, firstrow+5, firstrow+6, firstrow+7,firstrow+8, firstrow+9,)
#     counter=counter+1
#     firstrow=firstrow-hz




# counter=1
# step=0
# n = int(input("введите число"))
# while counter<=n:
#     print(n**counter)
#     counter=counter+1





# first=21 #переменая которую мы будем использовать в принте
# hz=0 #для цикла
# while hz<=0: #повторяет 0 раз следуешии строки
#     print(hz,"\n",first,"\n",first+1,first+1,"\n",first+2,first+2,first+2,"\n",first+3, first+3, first+3, first+3 ,"\n",first+4, first+4, first+4, first+4, first+4) #для вывода
#     hz=hz+1 #заканчивает цикл






# first=21 #переменая которую мы будем использовать в принте
# hz=0 #для цикла
# while hz<=0: #повторяет 0 раз следуешии строки
#     while hz<=5
#         print(hz,"\n",first,first+1,first+2,first+3,first+4,"\n",first,first+1,first+2,first+3,"\n",first,first+1,first+2,"\n",first,first+1,"\n",first)
#     hz=hz+1 #заканчивает цикл





# counter=1
# step=21
# n=5
# while counter<=n:
#     print(n++counter)
#     counter=counter+1




# a=0
# a=int(input("введите число"))
# summa=0
# while a<=500:
#     summa=summa+a
#     print(summa)
#     a=a+1







# seconds = int(input("введите секунды"))
# day=seconds/86400
# houvers=seconds/3600
# minutes=seconds/60
# ostatokotseconds=seconds
# ostatokotday=day%86400
# ostatokothouvers=houvers%3600
# ostatokotminutes=minutes%60
# print(ostatokotminutes,ostatokothouvers,ostatokotday,se














# n = int(input("введите число"))
# vusokostniy=n%4
# if vusokostniy==0:
#     print("высокостный")
# else:
#     print("не высокостный")
#
#
# n2= int(input("введите число"))
# vusokostniy2=n2%400
# if vusokostniy==0:
#     print("высокостный")






# thetniy=int(input("введите число"))
# nethetniy=thetniy%2
# if nethetniy==0:
#     print("четное")
# else:
#      print("не четный")


# twothetniy=int(input("введите число чтобы проверить его на четность"))
# chislonakotoroedeletsiasostatkom=int(input("введите число на которое будет деление с остатком"))
# twonethetniy=twothetniy%chislonakotoroedeletsiasostatkom
# if twonethetniy==0:
#     print("четное")
# else:
#     print("нечетное")


# thetniy=int(input("введите число"))
# if thetniy==1:
#     print("1,2,3,4,5,6,7,8,9,10")
#     if 20 == 20:
#         print("2,4,6,8,10")
#     if thetniy == 3:
#         print("3,6,9")
#     if thetniy == 4:
#         print("4,8")
#     if thetniy == 5:
#         print("5,10")
#     if thetniy == 6:
#         print("6")
#     if thetniy == 7:
#         print("7")
#     if thetniy == 8:
#         print("8")
#     if thetniy == 9:
#      print("9")
#     if thetniy == 10:
#      print("10")


# thehthislo = int(input("введите трехзначное число число"))
# edynyci=thehthislo%10
# desiatyki = int((thehthislo%100-edynyci)/10)
# sotniy = int (((thehthislo%1000-edynyci-desiatyki)/100))
# summa=edynyci+desiatyki+sotniy
# proizvedenii=edynyci*desiatyki*sotniy
# print("еденицы-",edynyci,"\n","десятки-",desiatyki,"\n","сотни-",sotniy,"\n","сумма-",summa,"\n","произведение-",proizvedenii)


# counter=0
# step=0
# n = int(input("введите число"))
# while counter<=n:
#     print(counter+4)
#     counter=counter+4


# summa=0
# Multiply=1
# thetniy=int(input("введите сколько раз вы будете вводить цисла")) #ввод сколько раз вы будет писать цисел
# for i in range (thetniy) : # цикл который будет повторятся столько сколько мы будем вводить цисел
#     hz=int(input("введите число")) #ввод чисел
#     nethetniy=hz%2 #проверка на четность
#     if nethetniy==0:# если четнасть соблюдается выполнять ниже скажаные действия
#
#         Multiply=Multiply*hz
#     print(Multiply)#вывод добутка
#     nethetnii=hz%2#проверка на четность
#     if nethetnii!=0:#если четность не соблюдается выполнять ниже скажаные действия
#         summa=summa+hz
#     print(summa)
# #







# roj=int(input("введите число"))
# # print1=20
# if roj==20:
#     print("ваше число 20")
# elif roj == 4:
#     print("ваше число 4")
# elif roj == 0:
#     print("ваше число 0")
# else:
#     print("ваше число не куда не подходит")



# j=4
# counter=2023
# while counter==2023:
#     print(4+4)
# j=j+4



# counter=0
# step=0
# n=80
# while counter<=n:
#     print(counter+3)
# while counter <= n:
#     print(counter+5)
#     counter=counter+3
# counter=counter+5




# roj=int(input("введите до которого будет идти проверка"))
# g=int(input("введите число"))
# j=int(input("введите число"))
# i=0
# while i<=roj:
#     if i%g==0 and i%j==0:
#         print(i)
#     i+=1









# i=1
# while i<=5000:
#     if i%139==0:
#         print(i)
#     i+=1


#
#
#
#
#
#
#
#
#
# name =input("какое твое имя")
# age =input("сколько тебе лет")
# print("Меня зовут", name, "мне", age, 10)
#
#
#
#
#
#
#
# code
# # Ввод чисел с клавиатуры и преобразование в целые числа
# num1 = int(input("Введите первое число: "))
# num2 = int(input("Введите второе число: "))
#
# # Сравнение чисел и вывод результата
# if num1 > num2:
#     print("Да")
# elif num1 == num2:
#     print("равны")
# else:
#     print("Нет")
#
#









# n=5000
#
# while n>0:
#     if n%139==0:
#         print(n)
#         break
#     n-=1
#





# numbers = input("Введите последовательность целых чисел ")
#
# # Разбиваем строку на числа и преобразуем каждое в целое число
# numbers = list(map(int, numbers.split()))
# # Создаем список для парных чисел
# even_numbers = []
#
# # Проходим по каждому числу в последовательности
# for num in numbers:
#     # Если число четное, добавляем его в список парных чисел
#     if num % 2 == 0:
#         even_numbers.append(num)
#
# # Выводим список парных чисел
# print("Парные числа в последовательности:", even_numbers)




# t=0
# t=input("Введите последовательность целых чисел ")







# udi=int(input("Введите последовательность целых чисел"))
# i=int(input("Введите числа которые"))
# while i<=udi:
#     if i%2==0:
#         print(i)
#     i+=1





# numbers = input("Введите последовательность целых чисел через пробел: ")
#
# # Разбиваем строку на числа и преобразуем каждое в целое число
# numbers = list(map(int, numbers.split()))
#
# # Создаем список для парных чисел
# even_numbers = []
#
# # Проходим по каждому числу в последовательности
# for num in numbers:
#     # Если число четное, добавляем его в список парных чисел
#     if num % 2 == 0:
#         even_numbers.append(num)
#
# # Выводим список парных чисел
# print("Парные числа в последовательности:", even_numbers)








# counter=0
# step=0
# n = int(input("введите число"))
# while counter<=n:
#     print(counter+2)
#     counter=counter+2




# width = int(input("Введите ширину пирамиды: "))
# height = int(input("Введите высоту пирамиды: "))
#
# for i in range(height):
#     for j in range(width):
#         if j <= i:
#             print(start, end=" ")
#             start += 1
#         else:
#             print(" ", end=" ")
#     print()
#
#



# width = int(input("Введите ширину пирамиды: "))
# height = int(input("Введите высоту пирамиды: "))
# start = int(input("Введите стартовое число: "))
#
# for i in range(height):
#     for j in range(width):
#         if j <= i:
#             print(start, end=" ")
#             start += 1
#         else:
#             print(" ", end=" ")
#     print()










# height = int(input("Введите высоту треугольника: "))
#
# # Рисуем треугольник с помощью циклов
# for i in range(height):
#     for j in range(height - i - 1):
#         print(" ", end="")
#     for j in range(2 * i + 1):
#         print("^", end="")
#     print()





# height = int(input("Введите высоту треугольника: "))
# i=0
# while i<height:
#     h=0
#     while h < height -i-1:
#         print(" ", end="")
#         h+=1
#         h=0
#         while h<2*i+1:
#             print(21+1, end="")
#             h+=1
#         print()
#         i+=1


# height = int(input("Введите высоту треугольника: "))
#
# i = height-1
# while i >= 0:
#     j = 0
#     while j < height - i - 1:
#         print(20+1, end="")
#         j += 1
#     j = 0
#     while j < 2*i+1:
#         print(20, end="")
#         j += 1
#     print()
#     i -= 1









# width = int(input("Введите ширину полутреугольника: "))
# height = int(input("Введите высоту полутреугольника: "))
# start = int(input("Введите стартовое число: "))
#
#
#
#
# for j in range(height):
#     for i in range(width):
#         if j >= i:
#             print(start, end=" ")
#             start += 1
#         else:
#             print(" ", end=" ")
#     print()


# width = int(input("Введите ширину полутреугольника: "))
# height = int(input("Введите высоту полутреугольника: "))
# start = int(input("Введите стартовое число: "))
#
# for i in range(height):
#     for j in range(width-1, -1, -1):
#         if j >= i:
#             print(start, end=" ")
#             start += 1
#         else:
#             print(" ", end=" ")
#     print()
# height = int(input("Введите высоту треугольника: "))
#
# i = height-1
# while i >= 0:
#     j = 0
#     while j < height - i - 1:
#         print(20+1, end="")
#         j += 1
#     j = 0
#     while j < 2*i+1:
#         print(20, end="")
#         j += 1
#     print()
#     i -= 1



# summa=0
# thetniy=int(input("введите сколько раз вы будете вводить цисла")) #ввод сколько раз вы будет писать цисел
# for i in range (thetniy) : # цикл который будет повторятся столько сколько мы будем вводить цисел
#     hz=int(input("введите зарплату")) #ввод чисел
#
#     if hz <= 0:
#         rashoiny=summa+hz
#         if hz>=0:
#             summa = summa + hz
#             print(summa,"грн")
#             print(summa/36.85,"доллоров")
# print(rashoiny)





# a=int(input("введите число на на которое будет идти проверка"))
# b=int(input("введите число на на которое будет идти проверка"))
# c=int(input("введите число на на которое будет идти проверка"))
# if c%b==0:
#     print(c, "делится на",b)
# else:
#     print(c, "не делется на",b)
# if c % a == 0:
#         print(c, "делится на",a)
# else:
#     print(c, "не делется на", a)
# if a % c == 0:
#         print(a, "делится на",c)
# else:
#     print(a, "не делется на", c)
# if b % c == 0:
#         print(b, "делится на",c)
# else:
#     print(b, "не делется на", c)





# er=int(input("введите какой вариант вам надо"))
# if er==1:
#     vanavto=int(input("введите скорость 1 автомобиля"))
#     twoavto=int(input("введите скорость 2 автомобиля"))
#     distance=int(input("введите растояние между автомобилями"))
#     if vanavto<=-1:
#         print("ОТРИЦАТЕЛЬНОЙ СКОРОСТИ НЕ СУЩЕСТВУЕТ")
#     else:
#         hz = vanavto + twoavto
#         hi = distance / hz
#         print("через", hi, "часов машины встретятся")
#     if twoavto <= -1:
#         print("ОТРИЦАТЕЛЬНОЙ СКОРОСТИ НЕ СУЩЕСТВУЕТ")
#     else:
#         hz=vanavto+twoavto
#         hi=distance/hz
#         print("через",hi,"часов машины встретятся")
# else:
#     panavto=int(input("введите скорость 1 автомобиля"))
#     pwoavto=int(input("введите скорость 2 автомобиля"))
#     if panavto<=-1:
#         print("ОТРИЦАТЕЛЬНОЙ СКОРОСТИ НЕ СУЩЕСТВУЕТ")
#     else:
#         pz = panavto + pwoavto
#         pi = 40075 / pz
#         print("через", pi, "часов машины встретятся")
#         if pwoavto <= -1:
#             print("ОТРИЦАТЕЛЬНОЙ СКОРОСТИ НЕ СУЩЕСТВУЕТ")
#         else:
#             pz=panavto+pwoavto
#             pi=40075/pz
#             print("через",pi,"часов машины встретятся")




# m=int(input("f"))
# hz=int(input("f"))
# for i in range(hz):
#     print("*", end=" ")
#     for i in range(m):
#         print("*", end=" ")






# width = int(input("Введите ширину полутриугольника : "))
# height = int(input("Введите высоту : "))
# hz = int(input("Введите число : "))
# for i in range(height):
#     for j in range(width):
#         if j <= i:
#
#             print(hz+j, end=" ")
#         else:
#             print("", end=" ")
#     print()




# r = float(input("Введите h цилиндр : "))
# h = float(input("Введите r цилиндра : "))
# hz=3,1415*r*h*2
# print("обём цилиндра состовляет:",hz)


# hz1 = int(input("Введите цисло : "))
# hz2 = int(input("Введите 2 цисло : "))
# if hz1<hz2:
#     print("<")
# else:
#     print(">")



# r = float(input("Введите цисло : "))
# h = float(input("Введите процент от цисла : "))
# hz=r/100*h
# print("процент от цисла состовляет:",hz)




# def power(a, n): #
#     if n == 0: #условие
#         return 1 #повторять действия 1 раз
#     else: #если не выполняется условие тогда :
#         return a * power(a, n - 1) #цикл
#    #пробел
# a = float(input()) #переменые
# n = int(input()) #переменые
# print(power(a, n)) #вывод






# height = int(input("Введите высоту треугольника: "))
#
# # Рисуем треугольник с помощью циклов
# for i in range(height):
#     for j in range(height - i-1): #
#         print(" ", end="")
#     for j in range(2 * i + 1):
#         print("*", end="")
#     print()


# a=int(input("привет, напиши мне 1 любые число"))
# b=int(input("привет, напиши мне 2 любые число"))
# c=a+b
# if a<b:
#     d=b-a
#     if a>b:
#         e=a-b
#         if a < b:
#             l = b / a
#             if a > b:
#                 f= a/b
#                 if a < b:
#                     print(d, c,f)
#                     if a > b:
#                         print(e, c,l)




# one=int(input("Добрий день everebady. Введіть будь ласка 1 сторону прямокутника"))
# two=int(input("Введіть будь ласка 2 сторону прямокутника"))
# perimetr=(one+two)*2
# sqare=one*two
# print("периметр прямокутника дорівнює ",perimetr,"площа прямомокутника дорівнює ", sqare, "см квадратних")


# one=int(input("Добрий день everebady. Введіть будь ласка площу основи паралепіпіпида"))
# two=int(input("Введіть будь ласка висоту паралепіпіпида"))
# hz=one*two
# print("обєм паралелепіпида дорівнює", hz)



# a=int(input("введите число")) #пременная
#
# def check_order(num):   # Преобразование числа в строку
#     num_str = str(num)  # Переменная-флаг для хранения результата
#
#     ordered = True  # Проверка последовательности цифр
#
#     for i in range(len(num_str) - 1):   # Если текущая цифра больше следующей,
#
#         if num_str[i] > num_str[i + 1]: # устанавливаем флаг в False и выходим из цикла
#             ordered = False
#             break
#
#     # Установка значения результата
#     if ordered:
#         result = "Положительный ответ"
#     else:
#         result = "Отрицательный ответ"
#
#     print(result)   # Вывод результата
#
# check_order(a)  # Примеры использования





# import random
#
# random_number = random.randrange(0, 10)
# b=int(input("Хай. Угадай число от 1 до 10"))
# if random_number==b:
#     print("вы угадали")
# if random_number<b:
#     print("ваше число больше")
# if random_number > b:
#     print("ваше число меньше")





# chet=int(input("введите число для проверки"))
# if chet%2:
#     print("ваше число не четное")
# else:
#     print("ваще число четное")
#
# a=int(input("введите число от которого начинается диапозон"))
# b=int(input("введите число с того заканчивается диапозон"))
# sushu = []
# for i in range(a, b):
#     for j in range(2, i):
#         if i % j == 0:
#             break
#     else:
#         sushu.append(i)
# print(sushu)





# import random
# imia=input("введіть імя собаки")
# age=input("введіть рік собаки")
# members = ["ваша собака хоче какати", "ваша собака захворіла", "ваша собака хоче їсти", "ваша собака жре диван", "ваша собака хоче пити", "вам требо привити собаку"]
# print(random.choice(members))
# a=random.choice
# if members [members]==a
# import random
# members = ["ваша собака хоче какати", "ваша собака захворіла", "ваша собака хоче їсти"]
# print(random.choice(members))
# a=random.choice
# print(members)


# import random
#
# def stop():
#     for year in range(1, 14):
#         age = year
#         members = ["ваша собака хочет какать", "ваша собака захворіла", "ваша собака хочет їсти"]
#         random_member = random.choice(members)
#
#         if age >= 13:
#             print("ВАША СОБАКА ЗДОХЛА")
#             return
#
#         print(f"Собаке {age} года:")
#         if random_member == members[0]:
#             place = input("Где ваша собака покакает? ")
#             print(f"Ваша собака покакает в {place}")
#         elif random_member == members[1]:
#             action = input("Что делать, если ваша собака заболела? ")
#             print(f"Вы должны {action} собаку")
#         else:
#             food = input("Что вы дадите вашей собаке поесть? ")
#             print(f"Вашей собаке можно дать {food}")
#     print("ВАША СОБАКА ЗДОХЛА")
#
# stop()


# import random
# import string
#
# def generate_password(length):
#     characters = string.ascii_letters + string.digits + string.punctuation
#     password = ''.join(random.choice(characters) for _ in range(length))
#     return password
#
# # def save_password(password):
# #     # Здесь может быть ваш код для сохранения пароля, например, запись в файл или добавление в базу данных
# #     print("Пароль сохранен!")
#
# length = int(input("Введите желаемую длину пароля: "))
# password = generate_password(length)
# print("Сгенерированный пароль:", password)
#
# # parol=int(input("введите длину пароля"))
# # slojnost=int(input("введите сложность пароля: Легкий,средний,тяжолый"))


# def fibonacci(n):
#     if n <= 0:
#         return "Неверное значение. Введите положительное число."
#
#     sequence = [0, 1]  # Первые два элемента последовательности Фибоначчи
#
#     while len(sequence) < n:
#         next_number = sequence[-1] + sequence[-2]
#         sequence.append(next_number)
#
#     return sequence[n - 1]
#
# # Получаем ввод от пользователя
# n = int(input("Введите номер элемента последовательности Фибоначчи: "))
#
# # Вызываем функцию и выводим результат
# result = fibonacci(n)
# print("Элемент с номером", n, "в последовательности Фибоначчи равен", result)



# hz2=int(input("на сколько 1 сторона треугольна меншьше за другу"))
# hz=int(input("на сколько 2 сторона меньше чем 3"))
# hz3=int(input("введите перемитр треугольника"))
# hz4=2+hz
# hz5=hz3-hz2
# hz6=hz5/hz4
# hz7=hz*hz6
# hz8=hz2+hz6
# print(hz7,hz8)

# n=int(input("введите чему равняется n"))
# one=(3*n+16)-(6-2*n)
# print("число", one, "кратное 5")

# one=int(input("введите первое число"))
# two=int(input("введите второе число"))
# three=int(input( "введите третье число"))

# max = max(one, two, three)
# min = min(one, two, three)
# print(max, min)

# if one>two and one>three:
#   print(one)
#   if one<two and one<three:
#     print(one)
# if two>one and two>three:
#   print(two)
#   if two<one and two<three:
#     print(two)
# elif three>one and three> two:
#   print(three)
#   if three<one and three< two:
#     print(three)


# x = 0
# max_value = float('-inf')
# while True:
#   hz2 = input("Введите значение: ")
#   if hz2 == "стоп":
#     break
#   hz2 = int(hz2)
#   max_value = max(max_value, hz2)
# print("Самое большое число:", max_value)




# a = int(input("ведите a: "))
# b = int(input("ведите b: "))
# c = int(input("ведите c: "))
# hz = 0
# if a > 0:
#     hz += a
# if b > 0:
#     hz += b
# if c > 0:
#     hz += c
# print(hz)

# max=-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
# for i in range(5):
#     one = int(input("введите число"))
#     if one>=max:
#         max=one
#     print(max)


# n = int(input("введите n"))
# total_sum = 0
# for i in range(1, n + 1):
#     total_sum += 1 / i
# print(total_sum)



# factorial=int(input("введите факториал "))
# numbers=1
# for i in range(1, factorial + 1):
#     numbers*=i
# print(numbers)



# numbers=1
# x = int(input("введите число"))
# x = [int(i) for i in str(x)]
# numbers*=x
# print(numbers)

# numbers = 1
# x = int(input("введите число"))
# x = [int(i) for i in str(x)]
# for element in x:
#         numbers *= element
#         print(numbers)

        # my_list = [1, 2, 3, 4, 5]
        # numbers = 1
        # for element in my_list:
        #     numbers *= element
        #     print(numbers)

# numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
# sorted_numbers = sorted(numbers, reverse=True)
# print(sorted_numbers)





# x = int(input("введите число в последовательности фибоначии")) #ввод числа фибоначи
#
# def fibonacci(n): #функция
#     if n in (1, 2): #условие
#         return 1 #возрощает цисло
#     return fibonacci(n - 1) + fibonacci(n - 2) #возрощает число фибоначи
#
# print(fibonacci(x)) #вывод

# spisok = [5, 10, 324, 24, 453, 2345, 124]
# number = int(input("Введите "))
# filtr = []
# for hz in spisok:
#     if hz > number:
#         filtr.append(hz)
# print(filtr)



# import pygame
# import numpy as np
#
# # Инициализация Pygame
# pygame.init()
#
# # Создание окна Pygame
# screen = pygame.display.set_mode((800, 600))
# pygame.display.set_caption('Матрица')
#
# # Создание шрифта для отображения текста
# font = pygame.font.Font(None, 30)
#
# def create_spiral_matrix(n):
#     matrix = np.zeros((n, n), dtype=int)
#     num = 1
#     direction = [(0, -1), (1, 0), (0, 1), (-1, 0)]  # Up, Right, Down, Left
#     row, col, d = 0, n-1, 0
#     while num <= n*n:
#         matrix[row][col] = num
#         num += 1
#         r, c = row + direction[d][0], col + direction[d][1]
#         if r >= 0 and r < n and c >= 0 and c < n and matrix[r][c] == 0:
#             row, col = r, c
#         else:
#             d = (d + 1) % 4
#             row, col = row + direction[d][0], col + direction[d][1]
#     return matrix
#
# n = 6  # Размер матрицы
# matrix = create_spiral_matrix(n)
#
# # Создание списка цветов
# colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255), (0, 255, 255)]
#
# # Вычисление позиции для центрирования матрицы
# start_x = (800 - n * 30) // 2
# start_y = (600 - n * 30) // 2
#
# # Главный цикл игры
# running = True
# color_index = 0
# while running:
#     # Обработка событий
#     for event in pygame.event.get():
#         if event.type == pygame.QUIT:
#             running = False
#
#     # Отображение матрицы
#     screen.fill((0, 0, 0))  # Заполнение экрана черным цветом
#     for y, row in enumerate(matrix):
#         for x, num in enumerate(row):
#             color = colors[(num + color_index) % len(colors)]
#             text = font.render(str(num), True, color)
#             screen.blit(text, (start_x + x * 30, start_y + y * 30))
#
#     # Обновление экрана
#     pygame.display.flip()
#     pygame.time.wait(1000)  # Ждем 1 секунду перед следующим обновлением
#     color_index = (color_index + 1) % len(colors)
#
# pygame.quit()




# matrich=int(input("введите какую матрицу вы хотите 1-класик 2-спиральная"))
# # Пример создания матрицы 3x3 без использования функций
# # if matrich==1:
# #
# N, M = map(int, input().split())
# a = [[0]*M for _ in range(N)]
# b = [[0]*2 for _ in range(N)]
#
# maxi = -9999
# mini = 9999
# counter = 0
#
# for i in range(N):
#     for j in range(M):
#         a[i][j] = int(input())
#         if a[i][j] > maxi:
#             maxi = a[i][j]
#             b[i][counter] = maxi
#         if a[i][j] < mini:
#             mini = a[i][j]
#             b[i][counter + 1] = mini
#
# for i in range(N):
#     for j in range(2):
#         print(b[i][j], end=' ')
#     print()
# else:
#     import numpy as np
#
#
#     def create_spiral_matrix(n):
#         matrix = np.zeros((n, n), dtype=int)
#         num = 1
#         direction = [(0, -1), (1, 0), (0, 1), (-1, 0)]  # Up, Right, Down, Left
#         row, col, d = 0, n - 1, 0
#         while num <= n * n:
#             matrix[row][col] = num
#             num += 1
#             r, c = row + direction[d][0], col + direction[d][1]
#             if r >= 0 and r < n and c >= 0 and c < n and matrix[r][c] == 0:
#                 row, col = r, c
#             else:
#                 d = (d + 1) % 4
#                 row, col = row + direction[d][0], col + direction[d][1]
#         return matrix
#
#
#     n = int(input("введите размер матрицы"))  # Размер матрицы
#     matrix = create_spiral_matrix(n)
#
#     # Вывод матрицы без скобок
#     for row in matrix:
#         print(' '.join(map(str, row)))


# matrix = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12],
#     [13, 14, 15, 15]
# ]
#
# for row in matrix:
#     min_num = min(row)
#     max_num = max(row)
#     print(f"{row},{min_num},{max_num}")


# amount_to_withdraw = int(input("введите число"))
# kupiri = [100, 50, 20, 10, 5, 2, 1]
# result = {}
#
# for kupiri in kupiri:
#     count = amount_to_withdraw // kupiri
#     if count > 0:
#         result[kupiri] = count
#         amount_to_withdraw -= count * kupiri
#
# print(amount_to_withdraw)
# for kupiri, count in result.items():
#     print(count, "по ",kupiri)





# from termcolor import colored
#
# def add_numbers(a, b):
#     c = a + b  # Исправлено на сложение
#     return c
#
# def Subtraction(a, b):
#     c = a - b  # Исправлено на вычитание
#     return c
#
# def division(a, b):
#     if b==0:
#         print(colored('Error', 'red'))  # Добавлен вывод ошибки красным цветом
#         return  # Добавлен возврат из функции при делении на ноль
#     c = a / b
#     return c
#
# def multiplication(a, b):
#     c = a * b
#     return c
#
# def menu():
#     number1=int(input("введите первое значения"))
#     number2=int(input("введити второе значение"))
#     imput=int(input("введите какую функцию вы хотите использовать 1-отнимание 2-добавление 3-деление 4-умножение"))
#     if imput<=0 or imput >= 5:  # Объединены условия для вывода ошибки
#         print(colored('Error', 'red'))
#     elif imput==1:
#         print(add_numbers(number1, number2))
#     elif imput==2:
#         print(Subtraction(number1, number2))
#     elif imput==3:
#         print(division(number1, number2))
#     elif imput==4:
#         print(multiplication(number1, number2))
#
# menu()

# def is_even():
#     number = int(input("Введите число: "))
#     return number % 2 == 0
#
# print(is_even())



# def calculate_average(numbers):
#     # Функція для обчислення середнього значення списку чисел
#     if not numbers:
#         return 0
#     return sum(numbers) / len(numbers)
#
# def is_even(number):
#     # Функція для перевірки, чи є число парним
#     return number % 2 == 0
#
# def count_vowels(s):
#     # Функція для підрахунку кількості голосних в рядку
#     vowels = "aeiouAEIOU"
#     return sum(1 for char in s if char in vowels)
#
#
# def reverse_string(s):
#     # Функція для зворотного виведення рядка
#     return s[::-1]
#
# def celsius_to_fahrenheit(celsius):
#     # Функція для перетворення температури з градусів Цельсія в градуси Фаренгейта
#     return (celsius * 9 / 5) + 32
#
# def menu():
#     # Функція для вибору користувачем однієї з вищезазначених функцій для виконання
#     choice = int(input("Введите номер функции, которую хотите использовать:\n1. Среднее значение чисел\n2. Проверка на четность\n3. Количество гласных в строке\n4. Обратная строка\n5. Преобразование температуры из Цельсия в Фаренгейт\n"))
#
#     if choice < 1 or choice > 5:
#         print('Ошибка: Введите число от 1 до 5')
#     else:
#         if choice == 1:
#             numbers = [float(x) for x in input("Введите числа через пробел: ").split()]
#             print(calculate_average(numbers))
#         elif choice == 2:
#             number = int(input("Введите число: "))
#             print(is_even(number))
#         elif choice == 3:
#             string = input("Введите строку: ")
#             print(count_vowels(string))
#         elif choice == 4:
#             string = input("Введите строку: ")
#             print(reverse_string(string))
#         elif choice == 5:
#             celsius = float(input("Введите температуру в Цельсиях: "))
#             print(celsius_to_fahrenheit(celsius))
# menu()





# def duplicate(s):
#     return s * 2
#
# def is_even(number):
#     return number % 2 == 0
#
# def calculate_average(numbers):
#     return sum(numbers) / len(numbers)
#
# def fibo(n):
#     if n <= 0:
#         return 0
#     elif n == 1:
#         return 1
#     else:
#         return fibo(n - 1) + fibo(n - 2)
#
# def average(n):
#     return sum(n) / len(n)
#
# def squares(n):
#     for i in range(1, n + 1):
#         yield i ** 2
#
# def gcd(a, b):
#     while b:
#         a, b = b, a % b
#     return a
#
# def find_repetitions(numbers, x):
#     return numbers.count(x)
#
# def highlight_repetitions(numbers, x):
#     return ['*' + str(num) + '*' if num == x else str(num) for num in numbers]
#
# def menu():
#     choice = int(input("Введите номер функции, которую хотите использовать:\n1. Вывод дублированного значения\n2. Проверка на четность и нечетность\n3. Подсчет суммы списка\n4. Функция на вычисление числа Фибоначчи\n5. Функция для вычисления среднего арифметического\n6. Функция-генератор\n7. Функция для подсчета НСД\n8. Поиск повторений числа в списке\n9. Выделение повторений числа в списке"))
#     if choice == 1:
#         s = int(input("Введите число: "))
#         print(duplicate(s))
#     elif choice == 2:
#         number = int(input("Введите число для проверки на четность: "))
#         print(is_even(number))
#     elif choice == 3:
#         numbers = [float(x) for x in input("Введите числа через пробел: ").split()]
#         print(calculate_average(numbers))
#     elif choice == 4:
#         n = int(input("Введите число: "))
#         print(fibo(n))
#     elif choice == 5:
#         n = [float(x) for x in input("Введите числа через пробел: ").split()]
#         print(average(n))
#     elif choice == 6:
#         n = int(input("Введите число: "))
#         for i in squares(n):
#             print(i)
#     elif choice == 7:
#         a = int(input("Введите первое число: "))
#         b = int(input("Введите второе число: "))
#         res = gcd(a, b)
#         print(res)
#     elif choice == 8:
#         numbers = [int(x) for x in input("Введите числа через пробел: ").split()]
#         x = int(input("Введите число, которое нужно найти: "))
#         repetitions = find_repetitions(numbers, x)
#         print(f"Найдено {repetitions} повторения")
#     elif choice == 9:
#         numbers = [int(x) for x in input("Введите числа через пробел: ").split()]
#         x = int(input("Введите число, которое нужно выделить: "))
#         highlighted_numbers = highlight_repetitions(numbers, x)
#         print(' '.join(highlighted_numbers))
#
# menu()
#






# fruit_dictionary = {
#     'яблуко': 'червоний',
#     'банан': 'жовтий',
#     'груша': 'зелений',
#     'апельсин': 'оранжевий'
# }
# fruit_name = input("Введіть назву фрукта: ")
# if fruit_name not in fruit_dictionary:
#     print(f"Фрукт з назвою '{fruit_name}' не знайдено у словнику.")
#     exit()
# new_color = input(f"Введіть новий колір для фрукта '{fruit_name}': ")
# fruit_dictionary[fruit_name] = new_color
# print("Оновлений словник фруктів:")
# for fruit, color in fruit_dictionary.items():
#     print(f"{fruit}: {color}")



# fruit_colors = {
#     'яблуко': 'червоний',
#     'банан': 'жовтий',
#     'груша': 'зелений',
#     'апельсин': 'оранжевий',
# }
#
# # Задання 11: Перевірте, чи словник порожній
# perevirka = input("Чи хочете перевірити, чи словник порожній? (Так/Ні): ")
# if perevirka.lower() == "так":
#     if not fruit_colors:
#         print("Словник порожній.")
#     else:
#         print("Словник не порожній.")
#
# # Задання 12: Пошук фруктів за кольором
# kolir_poisk = input("Введіть колір для пошуку фруктів: ")
# found_fruits = [key for key, value in fruit_colors.items() if value == kolir_poisk]
# if found_fruits:
#     print(f"Фрукти з колором {kolir_poisk}: {', '.join(found_fruits)}")
# else:
#     print(f"Фруктів з колором {kolir_poisk} не знайдено.")
#
# # Задання 13: Змініть колір існуючого фрукта
# zmіna_koliru_nazva = input("Введіть назву фрукта, колір якого ви хочете змінити: ")
# if zmіna_koliru_nazva in fruit_colors:
#     new_kolir = input("Введіть новий колір для фрукта: ")
#     fruit_colors[zmіna_koliru_nazva] = new_kolir
#     print(f"Колір фрукта {zmіna_koliru_nazva} змінено на {new_kolir}")
# else:
#     print(f"Фрукта {zmіna_koliru_nazva} немає у словнику.")
#
# # Задання 14: Виведіть назви всіх фруктів
# print("Назви всіх фруктів у словнику:")
# for fruit_name in fruit_colors.keys():
#     print(fruit_name)
#
# # Задання 15: Об'єднання двох словників фруктів
# second_fruit_colors = {}
# kilkist_fruktiv = int(input("Введіть кількість фруктів для додавання в другий словник: "))
# for _ in range(kilkist_fruktiv):
#     nazva_fruktu = input("Введіть назву фрукта: ")
#     kolir_fruktu = input("Введіть колір фрукта: ")
#     second_fruit_colors[nazva_fruktu] = kolir_fruktu
#
# # Об'єднання двох словників
# fruit_colors.update(second_fruit_colors)
#
# # Виведення об'єднаного словника
# print("Об'єднаний словник фруктів:")
# for key, value in fruit_colors.items():
#     print(f"{key}: {value}")


# fruit_colors = {
#     'яблуко': 'червоний',
#     'банан': 'жовтий',
#     'груша': 'зелений',
#     'апельсин': 'оранжевий',
# }
#
# if not fruit_colors:
#     print("Список пуст")
# else:
#     print("Список не пуст")
# kolir_poisk = input("Введіть колір для пошуку фруктів: ")
# found_fruits = [key for key, value in fruit_colors.items() if value == kolir_poisk]
# if found_fruits:
#     print(f"Фрукти з колором {kolir_poisk}: {', '.join(found_fruits)}")
# else:
#     print(f"Фруктів з колором {kolir_poisk} не знайдено.")
# kolir=input("введите колір")
# if kolir in fruit_colors.values():
#     print("Цвет",kolir,"найден в словаре.")
# else:
#     print("Цвет",kolir,"не найден в словаре.")
# znachenei=input("введите какой вы цвет хотите поменять")
# fruit_colors['червоний'] = znachenei
# for key in fruit_colors.keys():
#     print(key)


#
# nums = [10, 23, 65, 43, 13]
# doubled_nums = list(map(lambda x: x * 9/5+32, nums))
# print(doubled_nums)  # Виведе [2, 4, 6, 8, 10]


# nums = [6, 32, 25,2, 8]
# even_nums = list(filter(lambda x: x > 10, nums))
# print(even_nums)


# footballers_goals = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
# sorted_footballers_by_goals = sorted(footballers_goals.items(), key=lambda x:x[1], reverse=True)
# converted_dict = dict(sorted_footballers_by_goals)
# print(converted_dict)



# class Employee:
#     def __init__(self, name, age):
#         self.name = age
#         self.age = name
# Alex = Employee('Alex', 20)
# Amanda = Employee('Amanda', 30)
# David = Employee('David', 15)
# L = [Alex, Amanda, David]
# L.sort(key=lambda x: x.name)
# print([item.name for item in L])


# import math
# distance = lambda p1, p2: math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)
# point1 = (2, 3)
# point2 = (5, 7)
# print(distance(point1, point2))



# a = 1
# b = 2
# c = 3
# x_values = range(-10, 11)
# quadratic = lambda x: a*x**2 + b*x + c
# for x in x_values:
#     print(f'x={x}, y={quadratic(x)}')

# import numpy as np
# import matplotlib.pyplot as plt
# from matplotlib.colors import ListedColormap
# import ipywidgets as widgets
# from IPython.display import display, clear_output
#
# # Инициализация начального состояния игрового поля
# def initialize_grid(size):
#     return np.random.choice([0, 1], size=size*size, p=[0.5, 0.5]).reshape(size, size)
#
# # Обновление игрового поля
# def update_grid(grid):
#     new_grid = grid.copy()
#     rows, cols = grid.shape
#     for row in range(rows):
#         for col in range(cols):
#             alive_neighbors = np.sum(grid[row-1:row+2, col-1:col+2]) - grid[row, col]
#             if grid[row, col] == 1 and (alive_neighbors < 2 or alive_neighbors > 3):
#                 new_grid[row, col] = 0
#             elif grid[row, col] == 0 and alive_neighbors == 3:
#                 new_grid[row, col] = 1
#     return new_grid
#
# # Визуализация игрового поля
# def plot_grid(grid):
#     cmap = ListedColormap(['red', 'green'])
#     plt.figure(figsize=(5, 5))
#     plt.imshow(grid, cmap=cmap)
#     plt.axis('off')
#     plt.show()
#
# # Создание виджетов для интерактивного обновления
# button = widgets.Button(description="Следующий шаг")
# output = widgets.Output()
#
# def on_button_clicked(b):
#     global grid
#     grid=update_grid(grid)
#     with output:
#         clear_output(wait=True)
#         plot_grid(grid)
#
# button.on_click(on_button_clicked)
#
# # Инициализация и отображение
# grid = initialize_grid(9)  # Вы можете изменить размер сетки здесь
# display(button, output)
# with output:
#     plot_grid(grid)





# colvo = int(input("Введите сколько всего людей: "))
# ubitei = int(input("Введите какого по счету будет убивать? "))
# my_list = [i for i in range(1, colvo + 1)]
# index_to_remove = 0
# while len(my_list) > 1:
#     index_to_remove = (index_to_remove + ubitei - 1) % len(my_list)
#     print(f"Удаляем {my_list[index_to_remove]}")
#     my_list.pop(index_to_remove)
# print(f"Оставшийся элемент: {my_list}")




# from flask import Flask
#
# app = Flask(__name__)
#
# @app.route('/')
# def hello_world():
#     return 'Hello, World!'
#
# if __name__ == '__main__':
#     app.run(debug=True)







# import random
# my_list = [[2,5,4,6,2],
#            [4,5,6,3,6],
#            [4,6,2,6,7],
#            [7,2347,23,5,5]]
# for i in range(4):
#     min_value = min(my_list[0+1])
# print("Минимальное значение в списке:", min_value)



# import random
#
# # Получаем от пользователя количество строк, столбцов и диапазон случайных чисел
# rows = int(input("Введите количество строк: "))
# cols = int(input("Введите количество столбцов: "))
# start = int(input("Введите начало диапазона случайных чисел: "))
# end = int(input("Введите конец диапазона случайных чисел: "))
#
# matrix = [[random.randint(start, end) for _ in range(cols)] for _ in range(rows)]
# print("\nСлучайная матрица:")
# for row in matrix:
#     print(row)
#
# for col_index in range(cols):
#     column_values = [row[col_index] for row in matrix]
#     max_value = max(column_values)
#     print(f"\nМаксимальное значение в столбце {col_index + 1}: {max_value}")
#     print(column_values)
#
# # Добавленный код для нахождения максимального значения во всей матрице
# max_value_in_matrix = max(max(row) for row in matrix)
# print(f"\nСамое большое число во всей матрице: {max_value_in_matrix}")



# import socket
#
# host = '127.0.0.1'  # Локальный адрес
# port = 12345        # Произвольный порт для подключения
#
# with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
#     s.bind((host, port))
#     s.listen()
#     conn, addr = s.accept()
#     with conn:
#         print('Соединение установлено:', addr)
#         while True:
#             data = conn.recv(1024)
#             if not data:
#                 break
#             print("Получено:", data.decode())
#             msg = input("Сообщение: ")
#             conn.sendall(msg.encode())



import pygame
import sys

# Определения констант
BOARD_SIZE = 8
SQUARE_SIZE = 50
BOARD_COLOR_1 = (255, 206, 158)
BOARD_COLOR_2 = (209, 139, 71)
PIECE_COLOR_1 = (80, 80, 80)  # Цвет шашек первого игрока
PIECE_COLOR_2 = (240, 240, 240)  # Цвет шашек второго игрока
HIGHLIGHT_COLOR = (0, 0, 255)  # Цвет подсветки выбранной шашки
WINDOW_SIZE = (BOARD_SIZE * SQUARE_SIZE, BOARD_SIZE * SQUARE_SIZE)

# Инициализация Pygame
pygame.init()
screen = pygame.display.set_mode(WINDOW_SIZE)
pygame.display.set_caption('Игра в шашки')

# Вспомогательные переменные
selected_piece = None  # Текущая выбранная шашка
moving_piece = False  # Перемещается ли в данный момент выбранная шашка
pieces = []  # Список всех шашек в формате (row, col, color)

# Определение начального расположения шашек
for row in range(3):
    for col in range((row + 1) % 2, BOARD_SIZE, 2):
        pieces.append((row, col, PIECE_COLOR_1))
for row in range(5, 8):
    for col in range((row + 1) % 2, BOARD_SIZE, 2):
        pieces.append((row, col, PIECE_COLOR_2))

def draw_board():
    screen.fill(BOARD_COLOR_1)
    for row in range(BOARD_SIZE):
        for col in range(row % 2, BOARD_SIZE, 2):
            square = (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE)
            pygame.draw.rect(screen, BOARD_COLOR_2, square)

def draw_pieces():
    for piece in pieces:
        row, col, color = piece
        position = (col * SQUARE_SIZE + SQUARE_SIZE // 2, row * SQUARE_SIZE + SQUARE_SIZE // 2)
        pygame.draw.circle(screen, color, position, SQUARE_SIZE // 2 - 5)
        if selected_piece and piece == selected_piece:
            pygame.draw.circle(screen, HIGHLIGHT_COLOR, position, SQUARE_SIZE // 2 - 3, 1)

def select_piece(pos):
    global selected_piece, moving_piece
    x, y = pos
    col, row = x // SQUARE_SIZE, y // SQUARE_SIZE
    for piece in pieces:
        if piece[:2] == (row, col):
            if selected_piece == piece:
                selected_piece = None
                moving_piece = False
            else:
                selected_piece = piece
                moving_piece = True
            return
    selected_piece = None
    moving_piece = False

def move_piece(pos):
    global selected_piece, moving_piece
    if moving_piece and selected_piece:
        x, y = pos
        col, row = x // SQUARE_SIZE, y // SQUARE_SIZE
        # Проверка, что движение происходит по горизонтали в пределах доски
        if row == selected_piece[0] and 0 <= col < BOARD_SIZE:
            pieces.remove(selected_piece)
            selected_piece = (row, col, selected_piece[2])
            pieces.append(selected_piece)
            moving_piece = False  # Завершаем перемещение

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Левая кнопка мыши
                select_piece(event.pos)
        elif event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1 and moving_piece:  # Левая кнопка мыши и шашка выбрана для перемещения
                move_piece(event.pos)

    draw_board()
    draw_pieces()
    pygame.display.flip()

