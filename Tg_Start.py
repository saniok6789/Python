import asyncio
import logging
from aiogram import Dispatcher, F
from aiogram.client.bot import Bot, DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    PreCheckoutQuery,
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
ADMIN_ID = 1763797493  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤
user_data = {}

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# --- –ö–æ–º–∞–Ω–¥–∞ /start (–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–∫–∞–∑–∞.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –º–µ–¥ —Ñ–∞—Ü–µ–ª–∏–µ–≤—ã–π", callback_data="order_honey")],
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –º–µ–¥ –º–∞–π—Å–∫–∏–π", callback_data="order_honey2")],
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –º–µ–¥ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω—ã–π", callback_data="order_honey3")],
            [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="contact_support")]
        ]
    )

    await message.answer(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è BeeinSneakers.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:",
        reply_markup=keyboard
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ ---
@dp.callback_query(F.data)
async def handle_order(query: CallbackQuery):
    user = query.from_user
    user_id = user.id
    await query.answer()

    order_text = {
        "order_honey": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–¥ —Ñ–∞—Ü–µ–ª–∏–µ–≤—ã–π.",
        "order_honey2": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–¥ –º–∞–π—Å–∫–∏–π.",
        "order_honey3": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–¥ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω—ã–π."
    }

    if query.data in order_text:
        user_data[user_id] = {"choice": order_text[query.data], "step": "awaiting_address"}
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞ –∏ —É–ª–∏—Ü—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")

    elif query.data == "contact_support":
        contact_button = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:", reply_markup=contact_button)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ email ---
@dp.message(F.text)
async def handle_text_input(message: Message):
    user_id = message.from_user.id

    if user_id in user_data:
        step = user_data[user_id].get("step")

        if step == "awaiting_address":
            user_data[user_id]["address"] = message.text
            user_data[user_id]["step"] = "awaiting_email"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

        elif step == "awaiting_email":
            user_data[user_id]["email"] = message.text
            user_data[user_id]["step"] = "awaiting_payment"

            order_info = (
                f"**–ù–æ–≤—ã–π –∑–∞–∫–∞–∑**\n"
                f"üì¶ {user_data[user_id]['choice']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {user_data[user_id]['address']}\n"
                f"üìß Email: {user_data[user_id]['email']}\n"
                f"üë§ @{message.from_user.username or '–ë–µ–∑ username'}\n"
                f"üÜî ID: {user_id}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–∫–∞–∑
            await bot.send_message(chat_id=ADMIN_ID, text=order_info)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è"
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è")]],
                resize_keyboard=True
            )

            await message.answer(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –æ–ø–ª–∞—Ç–∏—Ç–µ 1 –∑–≤–µ–∑–¥—É ‚≠êÔ∏è.",
                reply_markup=keyboard
            )


@dp.message(F.text == "–ü—Ä–∏–≤–µ—Ç üëã")
async def greet_user(message: Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç "–ü—Ä–∏–≤–µ—Ç!" –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è".
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è")]],
        resize_keyboard=True
    )

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üòä", reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è" ---
@dp.message(F.text == "–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è")
async def send_invoice_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É 1 –∑–≤–µ–∑–¥—ã.
    """
    prices = [LabeledPrice(label="XTR", amount=100)]  # 1 –∑–≤–µ–∑–¥–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö, 100 = 1 XTR)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è",
                    pay=True
                )
            ]
        ]
    )

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–û–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã",
        description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É!",
        provider_token="",  # Telegram Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç provider_token
        currency="XTR",
        prices=prices,
        payload="one_star_payment",
        reply_markup=keyboard
    )


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É ---
@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.
    """
    await pre_checkout_query.answer(ok=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ---
@dp.message(lambda message: message.successful_payment)
async def success_payment_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    """
    await message.answer(text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É 1 –∑–≤–µ–∑–¥—ã! –í—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –±–æ—Ç–∞ ‚≠êÔ∏è")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    dp = Dispatcher()
    dp.include_router(dp)  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
